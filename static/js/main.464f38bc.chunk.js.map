{"version":3,"sources":["../node_modules/moment-mini/locale sync /^/.//.*$","App.tsx","serviceWorker.ts","index.tsx"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","mermaid","parseError","err","hash","console","error","App","mermaidContainer","useRef","useState","diagram","setDiagram","useEffect","current","parse","innerHTML","render","svg","theme","preset","sx","display","gridGap","gridTemplateColumns","background","height","padding","value","onValueChange","highlight","style","fontFamily","fontSize","ref","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"uLAAA,IAAIA,EAAM,CACT,WAAY,IACZ,cAAe,KAIhB,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,K,sKCdpBY,IAAQC,WAAa,SAASC,EAAQC,GACpCC,QAAQC,MAAMH,IA0DDI,MAvDf,WACE,IAAMC,EAAmBC,iBAAuB,MADnC,EAGiBC,mBAAS,oCAH1B,mBAGNC,EAHM,KAGGC,EAHH,KAwBb,OAjBAC,qBAAU,WACR,GAAiC,OAA7BL,EAAiBM,QACnB,IACEb,IAAQc,MAAMJ,GAEdH,EAAiBM,QAAQE,UAAY,GACrCf,IAAQgB,OAAO,SAAUN,GAAS,SAACO,GACA,OAA7BV,EAAiBM,UACrBN,EAAiBM,QAAQE,UAAYE,MAEvC,MAAOf,GACPE,QAAQC,MAAMH,MAGjB,CAACQ,IAIF,kBAAC,IAAD,CAAeQ,MAAOC,KACpB,kBAAC,IAAD,CACEC,GAAI,CACFC,QAAS,OACTC,QAAS,EACTC,oBAAqB,uCACrBC,WAAY,YACZC,OAAQ,QACRC,QAAS,QAET,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,MAAOjB,EACPkB,cAAejB,EACfkB,UAAW,SAAAnC,GAAI,OAAIA,GACnBgC,QAAS,GACTI,MAAO,CACLC,WAAY,sCACZC,SAAU,OAIhB,kBAAC,IAAD,KACE,yBAAKC,IAAK1B,QCjDF2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASvB,OACP,kBAAC,IAAMwB,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA5C,GACLD,QAAQC,MAAMA,EAAM6C,c","file":"static/js/main.464f38bc.chunk.js","sourcesContent":["var map = {\n\t\"./locale\": 147,\n\t\"./locale.js\": 147\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 349;","import React, { useRef, useState, useEffect } from 'react';\nimport mermaid from 'mermaid';\nimport Editor from 'react-simple-code-editor';\nimport { Box, Card } from 'rebass'\nimport { ThemeProvider } from 'theme-ui'\n// @ts-ignore\nimport preset from '@rebass/preset'\n\n// @ts-ignore\nmermaid.parseError = function(err:any,hash:any) {\n  console.error(err);\n};\n\nfunction App() {\n  const mermaidContainer = useRef<HTMLDivElement>(null);\n\n  const [diagram, setDiagram] = useState(`graph TB\n  a-->b\n  b-->a`)\n\n  useEffect(() => {\n    if (mermaidContainer.current !== null) {\n      try {\n        mermaid.parse(diagram)\n\n        mermaidContainer.current.innerHTML = '';\n        mermaid.render('digram', diagram, (svg:string) => {\n          if (mermaidContainer.current !== null)\n          mermaidContainer.current.innerHTML = svg;\n        })\n      } catch (err) {\n        console.error(err);\n      }\n    } \n  }, [diagram]);\n\n\n  return (\n    <ThemeProvider theme={preset}>\n      <Box\n        sx={{\n          display: 'grid',\n          gridGap: 4,\n          gridTemplateColumns: 'repeat(auto-fit, minmax(128px, 1fr))',\n          background: 'slategray',\n          height: '100vh',\n          padding: '1em'\n        }}>\n          <Card>\n            <Editor\n              value={diagram}\n              onValueChange={setDiagram}\n              highlight={code => code}\n              padding={10}\n              style={{\n                fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\n                fontSize: 12,\n              }}\n            />\n          </Card>\n          <Card>\n            <div ref={mermaidContainer} />\n          </Card>\n        </Box>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}